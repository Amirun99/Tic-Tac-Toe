{"ast":null,"code":"var _jsxFileName = \"/Users/amirun/test_app/src/TicTacToe/TicTacToe.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport './TicTacToe.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst TicTacToe = () => {\n  _s();\n\n  const [turn, setTurn] = useState('X');\n  const [cells, setCells] = useState(Array(9).fill(''));\n  const [winner, setWinner] = useState();\n\n  const checkForWinner = squares => {\n    let combos = {\n      across: [[0, 1, 2], [3, 4, 5], [6, 7, 8]],\n      down: [[0, 3, 6], [1, 4, 7], [2, 5, 8]],\n      diagnol: [[0, 4, 8], [2, 4, 6]]\n    };\n\n    for (let combo in combos) {\n      combos[combo].forEach(pattern => {\n        if (squares[pattern[0]] === '' || squares[pattern[1]] === '' || squares[pattern[2]] === '') {//do Nothing\n        } else if (squares[pattern[0]] === squares[pattern[1]] && squares[pattern[1]] === squares[pattern[2]]) {\n          setWinner(squares[pattern[0]]);\n        }\n      });\n    }\n  };\n\n  const handleClick = num => {\n    if (cells[num] !== '') {\n      alert('already clicked');\n      return;\n    }\n\n    let squares = [...cells];\n\n    if (turn === 'X') {\n      squares[num] = 'X';\n      setTurn('O');\n    } else {\n      squares[num] = 'O';\n      setTurn('X');\n    }\n\n    setCells(squares);\n    console.log(squares);\n  };\n\n  const Cell = _ref => {\n    let {\n      num\n    } = _ref;\n    return /*#__PURE__*/_jsxDEV(\"td\", {\n      onClick: () => handleClick(num),\n      children: cells[num]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 16\n    }, this);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"table\", {\n      children: [\"Turn: \", turn, /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: [/*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(Cell, {\n            num: 0\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Cell, {\n            num: 1\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Cell, {\n            num: 2\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(Cell, {\n            num: 3\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Cell, {\n            num: 4\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 79,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Cell, {\n            num: 5\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(Cell, {\n            num: 6\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Cell, {\n            num: 7\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 84,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Cell, {\n            num: 8\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 13\n    }, this), winner && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [winner, \" is the winner!\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 16\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"Play Again ?\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 16\n      }, this)]\n    }, void 0, true)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 9\n  }, this);\n};\n\n_s(TicTacToe, \"NsG8d42piLbpyh1dg/T9HRE02D4=\");\n\n_c = TicTacToe;\nexport default TicTacToe;\n\nvar _c;\n\n$RefreshReg$(_c, \"TicTacToe\");","map":{"version":3,"sources":["/Users/amirun/test_app/src/TicTacToe/TicTacToe.js"],"names":["React","useState","TicTacToe","turn","setTurn","cells","setCells","Array","fill","winner","setWinner","checkForWinner","squares","combos","across","down","diagnol","combo","forEach","pattern","handleClick","num","alert","console","log","Cell"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAO,iBAAP;;;;AAEA,MAAMC,SAAS,GAAG,MAAM;AAAA;;AACxB,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBH,QAAQ,CAAC,GAAD,CAAhC;AAEA,QAAM,CAACI,KAAD,EAAQC,QAAR,IAAoBL,QAAQ,CAACM,KAAK,CAAC,CAAD,CAAL,CAASC,IAAT,CAAc,EAAd,CAAD,CAAlC;AAEA,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBT,QAAQ,EAApC;;AACI,QAAMU,cAAc,GAAIC,OAAD,IAAa;AAChC,QAAIC,MAAM,GAAE;AACRC,MAAAA,MAAM,EAAE,CACJ,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CADI,EAEJ,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAFI,EAGJ,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAHI,CADA;AAMRC,MAAAA,IAAI,EAAE,CACF,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CADE,EAEF,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAFE,EAGF,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAHE,CANE;AAWRC,MAAAA,OAAO,EAAC,CACJ,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CADI,EAEJ,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAFI;AAXA,KAAZ;;AAiBA,SAAK,IAAIC,KAAT,IAAkBJ,MAAlB,EAAyB;AACrBA,MAAAA,MAAM,CAACI,KAAD,CAAN,CAAcC,OAAd,CAAuBC,OAAD,IAAa;AAC/B,YACIP,OAAO,CAACO,OAAO,CAAC,CAAD,CAAR,CAAP,KAAwB,EAAxB,IACAP,OAAO,CAACO,OAAO,CAAC,CAAD,CAAR,CAAP,KAAwB,EADxB,IAEAP,OAAO,CAACO,OAAO,CAAC,CAAD,CAAR,CAAP,KAAwB,EAH5B,EAIC,CACG;AACH,SAND,MAMO,IACHP,OAAO,CAACO,OAAO,CAAC,CAAD,CAAR,CAAP,KAAwBP,OAAO,CAACO,OAAO,CAAC,CAAD,CAAR,CAA/B,IACAP,OAAO,CAACO,OAAO,CAAC,CAAD,CAAR,CAAP,KAAwBP,OAAO,CAACO,OAAO,CAAE,CAAF,CAAR,CAF5B,EAGN;AACGT,UAAAA,SAAS,CAACE,OAAO,CAACO,OAAO,CAAC,CAAD,CAAR,CAAR,CAAT;AACH;AACJ,OAbD;AAcH;AACJ,GAlCD;;AAoCA,QAAMC,WAAW,GAAIC,GAAD,IAAS;AACzB,QAAIhB,KAAK,CAACgB,GAAD,CAAL,KAAe,EAAnB,EAAsB;AAClBC,MAAAA,KAAK,CAAC,iBAAD,CAAL;AACA;AACH;;AAED,QAAIV,OAAO,GAAG,CAAC,GAAGP,KAAJ,CAAd;;AACA,QAAIF,IAAI,KAAK,GAAb,EAAkB;AACdS,MAAAA,OAAO,CAACS,GAAD,CAAP,GAAe,GAAf;AACAjB,MAAAA,OAAO,CAAC,GAAD,CAAP;AACH,KAHD,MAGO;AACHQ,MAAAA,OAAO,CAACS,GAAD,CAAP,GAAe,GAAf;AACAjB,MAAAA,OAAO,CAAC,GAAD,CAAP;AACH;;AACDE,IAAAA,QAAQ,CAACM,OAAD,CAAR;AACAW,IAAAA,OAAO,CAACC,GAAR,CAAYZ,OAAZ;AACH,GAhBD;;AAkBA,QAAMa,IAAI,GAAG,QAAa;AAAA,QAAZ;AAAEJ,MAAAA;AAAF,KAAY;AACtB,wBAAO;AAAI,MAAA,OAAO,EAAE,MAAKD,WAAW,CAACC,GAAD,CAA7B;AAAA,gBAAqChB,KAAK,CAACgB,GAAD;AAA1C;AAAA;AAAA;AAAA;AAAA,YAAP;AACH,GAFD;;AAGA,sBACI;AAAK,IAAA,SAAS,EAAC,WAAf;AAAA,4BACI;AAAA,2BACWlB,IADX,eAEI;AAAA,gCACI;AAAA,kCACI,QAAC,IAAD;AAAM,YAAA,GAAG,EAAE;AAAX;AAAA;AAAA;AAAA;AAAA,kBADJ,eAEI,QAAC,IAAD;AAAM,YAAA,GAAG,EAAE;AAAX;AAAA;AAAA;AAAA;AAAA,kBAFJ,eAGI,QAAC,IAAD;AAAM,YAAA,GAAG,EAAE;AAAX;AAAA;AAAA;AAAA;AAAA,kBAHJ;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ,eAMI;AAAA,kCACI,QAAC,IAAD;AAAM,YAAA,GAAG,EAAE;AAAX;AAAA;AAAA;AAAA;AAAA,kBADJ,eAEI,QAAC,IAAD;AAAM,YAAA,GAAG,EAAE;AAAX;AAAA;AAAA;AAAA;AAAA,kBAFJ,eAGI,QAAC,IAAD;AAAM,YAAA,GAAG,EAAE;AAAX;AAAA;AAAA;AAAA;AAAA,kBAHJ;AAAA;AAAA;AAAA;AAAA;AAAA,gBANJ,eAWI;AAAA,kCACI,QAAC,IAAD;AAAM,YAAA,GAAG,EAAE;AAAX;AAAA;AAAA;AAAA;AAAA,kBADJ,eAEI,QAAC,IAAD;AAAM,YAAA,GAAG,EAAE;AAAX;AAAA;AAAA;AAAA;AAAA,kBAFJ,eAGI,QAAC,IAAD;AAAM,YAAA,GAAG,EAAE;AAAX;AAAA;AAAA;AAAA;AAAA,kBAHJ;AAAA;AAAA;AAAA;AAAA;AAAA,gBAXJ;AAAA;AAAA;AAAA;AAAA;AAAA,cAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,EAqBKM,MAAM,iBACJ;AAAA,8BACA;AAAA,mBAAIA,MAAJ;AAAA;AAAA;AAAA;AAAA;AAAA,cADA,eAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFA;AAAA,oBAtBP;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AA8BH,CA7FD;;GAAMP,S;;KAAAA,S;AA+FN,eAAeA,SAAf","sourcesContent":["import React, { useState } from 'react';\nimport './TicTacToe.css';\n\nconst TicTacToe = () => {\nconst [turn, setTurn] = useState('X');\n\nconst [cells, setCells] = useState(Array(9).fill(''));\n\nconst [winner, setWinner] = useState();\n    const checkForWinner = (squares) => {\n        let combos ={\n            across: [\n                [0, 1, 2],\n                [3, 4, 5],\n                [6, 7, 8],\n            ],\n            down: [\n                [0, 3, 6],\n                [1, 4, 7],\n                [2, 5, 8],\n            ],\n            diagnol:[\n                [0, 4, 8],\n                [2, 4, 6],\n            ],\n        };\n\n        for (let combo in combos){\n            combos[combo].forEach((pattern) => {\n                if (\n                    squares[pattern[0]] === '' ||\n                    squares[pattern[1]] === '' ||\n                    squares[pattern[2]] === ''\n                ){\n                    //do Nothing\n                } else if (\n                    squares[pattern[0]] === squares[pattern[1]] &&\n                    squares[pattern[1]] === squares[pattern [2]]\n                ){\n                    setWinner(squares[pattern[0]])\n                }\n            });\n        }\n    };\n\n    const handleClick = (num) => {\n        if (cells[num] !== ''){\n            alert('already clicked');\n            return;\n        }\n\n        let squares = [...cells];\n        if (turn === 'X') {\n            squares[num] = 'X';\n            setTurn('O');\n        } else {\n            squares[num] = 'O';\n            setTurn('X');\n        }\n        setCells(squares);\n        console.log(squares)\n    };\n\n    const Cell = ({ num }) => {\n        return <td onClick={()=> handleClick(num)}>{cells[num]}</td>\n    }\n    return (\n        <div className='container'>\n            <table>\n                Turn: {turn}\n                <tbody>\n                    <tr>\n                        <Cell num={0}/>\n                        <Cell num={1}/>\n                        <Cell num={2}/>\n                    </tr>\n                    <tr>\n                        <Cell num={3}/>\n                        <Cell num={4}/>\n                        <Cell num={5}/>\n                    </tr>\n                    <tr>\n                        <Cell num={6}/>\n                        <Cell num={7}/>\n                        <Cell num={8}/>\n                    </tr>\n                </tbody>\n            </table>\n            {winner && (\n               <>\n               <p>{winner} is the winner!</p>\n               <button>Play Again ?</button>\n               </>  \n            )}\n        </div>\n    );\n};\n\nexport default TicTacToe;"]},"metadata":{},"sourceType":"module"}